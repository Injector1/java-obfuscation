plugins {
    id 'java'
    id 'application'
}

group = 'com.spartacus'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'fr.inria.gforge.spoon:spoon-core:10.4.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = 'com.obfuscationdemo.Main'
}

// Task: bundle all dependencies into a single JAR
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Create a fat JAR with all dependencies'
    archiveClassifier.set('fat')

    from {
        configurations.runtimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }
    with jar

    manifest {
        attributes(
                'Main-Class': application.mainClass,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

// Task: run Spoon processors to obfuscate source code
tasks.register('spoonObfuscate', JavaExec) {
    group = 'obfuscation'
    description = 'Execute Spoon-based obfuscator'
    dependsOn tasks.compileJava

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('com.obfuscationdemo.Obfuscator')

    // Force the task to use Java 17
    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    })

    // Input and output directories for obfuscation
    args = ['src/main/java', 'build/obfuscated-source']
}

// Task to compile the obfuscated source code
tasks.register('compileObfuscatedSource', JavaCompile) {
    group = 'obfuscation'
    description = 'Compile the obfuscated source code'
    dependsOn spoonObfuscate

    source = fileTree('build/obfuscated-source')
    destinationDirectory = file('build/classes/java/obfuscated')
    classpath = sourceSets.main.compileClasspath

    sourceCompatibility = java.sourceCompatibility
    targetCompatibility = java.targetCompatibility
}

// Task to create a JAR from the obfuscated classes
tasks.register('obfuscatedJar', Jar) {
    group = 'obfuscation'
    description = 'Create a JAR file from the obfuscated classes'
    dependsOn compileObfuscatedSource

    archiveBaseName = project.name
    archiveVersion = project.version
    archiveClassifier = 'obfuscated'

    from('build/classes/java/obfuscated')

    manifest {
        attributes(
                'Main-Class': application.mainClass,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

tasks.test {
    useJUnitPlatform()
}


